function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}import{authenticate as t}from"@google-cloud/local-auth";import{google as s}from"googleapis";import{loadJson as a,saveJson as i}from"jnu-abc";let r=({user:e="bigwhitekmc",sn:t=0,scopeDir:s=""}={})=>s?a(`${s}/scopes_${e}_${t}.json`)??a(`${s}/scopes_default.json`):{};export class GoogleAuth{async loadSavedCredentialsIfExist(){try{return await s.auth.fromJSON(JSON.parse(a(this.tokenPath)))}catch(e){return null}}async saveCredentials(e){let t=a(this.crendentialsPath),s=t.installed||t.web,r=JSON.stringify({type:"authorized_user",client_id:s.client_id,client_secret:s.client_secret,expiry_date:e.credentials.expiry_date,refresh_token:e.credentials.refresh_token});i(this.tokenPath,r)}async authorize(){let e=await this.loadSavedCredentialsIfExist();return e?e.credentials.expiry_date&&Date.now()>=e.credentials.expiry_date&&(console.log("Token has expired, refreshing..."),e=await this.refreshAccessToken(e)):(e=await t({scopes:this.scopes,keyfilePath:this.crendentialsPath})).credentials&&await this.saveCredentials(e),e}async refreshAccessToken(e){let{token:t}=await e.getAccessToken();return e.credentials.access_token=t,e.credentials.expiry_date=Date.now()+36e5,await this.saveCredentials(e),e}constructor({user:t="bigwhitekmc",type:s="oauth2",sn:a=0,scopeDir:i="",authDir:n=""}={}){e(this,"tokenPath",""),e(this,"crendentialsPath",""),e(this,"scopes",void 0),this.scopes=r({user:t,sn:a,scopeDir:i}),"oauth2"===s&&(this.tokenPath=`${n}/token_${t}_${a}.json`,this.crendentialsPath=`${n}/${s}_${t}_${a}.json`)}}