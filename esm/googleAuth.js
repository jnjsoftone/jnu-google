function e(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}import{authenticate as t}from"@google-cloud/local-auth";import{OAuth2Client as o}from"google-auth-library";import{loadJsonFromGithub as n,saveJsonToGithub as s}from"jnu-cloud";import*as i from"fs";import*as r from"os";import*as a from"path";let{ENV_GITHUB_OWNER:l,ENV_GITHUB_REPO:c,ENV_GITHUB_TOKEN:h}=process.env,d={owner:l||"",repo:c||"",token:h||""},u=async e=>n(e,d),g=async(e,t)=>{s(e,t,d)},k=async({user:e="bigwhitekmc",sn:t=0,scopeDir:o=""}={})=>{let n=o?await u(`${o}scopes_${e}_${t}.json`)??await u(`${o}scopes_default.json`):[];return console.log("Loaded scopes:",n),n};export class GoogleAuth{async init({user:e="bigwhitekmc",sn:t=0,scopeDir:o=""}={}){return this.scopes=await k({user:e,sn:t,scopeDir:o}),this}async loadSavedCredentialsIfExist(){try{console.log("Loading credentials from:",this.tokenPath);let e=await u(this.tokenPath);if(console.log("Loaded credentials:",e?"(exists)":"(not found)"),!e)return console.log("No credentials found"),null;console.log("Loading OAuth2 keys from:",this.crendentialsPath);let t=await u(this.crendentialsPath);if(!t)return console.log("No OAuth2 keys found"),null;let n=t.installed||t.web;if(console.log("OAuth2 key loaded:",n?"(exists)":"(not found)"),!n||!n.client_id||!n.client_secret)return console.log("Invalid OAuth2 keys"),null;let s=new o({clientId:n.client_id,clientSecret:n.client_secret,redirectUri:n.redirect_uris[0]}),i={access_token:e.access_token,refresh_token:e.refresh_token,scope:this.scopes.join(" "),token_type:e.token_type||"Bearer",expiry_date:e.expiry_date};console.log("Setting credentials with token:",{hasAccessToken:!!i.access_token,hasRefreshToken:!!i.refresh_token,scope:i.scope,tokenType:i.token_type,expiryDate:i.expiry_date?new Date(i.expiry_date).toISOString():"not set"}),s.setCredentials(i);let r=i.expiry_date;if((!r||Date.now()>=r-3e4)&&i.refresh_token){console.log("Token is expired or about to expire, refreshing...");try{let{credentials:e}=await s.refreshAccessToken();s.setCredentials(e),await this.saveCredentials(s),console.log("Token refreshed successfully")}catch(t){if(console.error("Error refreshing token:",t),t.message&&"string"==typeof t.message&&t.message.includes("invalid_grant")){console.log("Invalid grant error detected. Removing token file and starting new authentication.");try{await g(this.tokenPath,{}),console.log(`Token file cleared: ${this.tokenPath}`)}catch(e){console.error("Failed to clear token file:",e)}return null}if(!e.refresh_token)return console.log("No refresh token available, authentication required"),null}}return s}catch(e){return console.error("Error loading credentials:",e),null}}async saveCredentials(e){try{console.log("Saving credentials...");let t=await u(this.crendentialsPath);if(!t)throw console.error("OAuth2 keys not found"),Error("OAuth2 keys not found");let o=t.installed||t.web;if(!e.credentials.refresh_token){console.log("No refresh token in credentials, keeping existing one");let t=await u(this.tokenPath);t?.refresh_token&&(e.credentials.refresh_token=t.refresh_token)}let n={type:"authorized_user",client_id:o.client_id,client_secret:o.client_secret,refresh_token:e.credentials.refresh_token,access_token:e.credentials.access_token,scope:this.scopes.join(" "),token_type:e.credentials.token_type||"Bearer",expiry_date:e.credentials.expiry_date};console.log("Saving credentials to:",this.tokenPath),await g(this.tokenPath,n),console.log("Credentials saved successfully")}catch(e){throw console.error("Error saving credentials:",e),e}}async authorize(){console.log("Starting authorization process...");let e=await this.loadSavedCredentialsIfExist();if(e)try{let t=await e.getTokenInfo(e.credentials.access_token||"");return console.log("Token is valid:",t?.scopes),e}catch(e){console.error("Token validation failed:",e?.message||"Unknown error"),console.log("Proceeding with new authentication...")}else console.log("No valid credentials found, starting new authentication...");let o=await u(this.crendentialsPath);if(!o)throw Error("OAuth2 키 파일을 GitHub에서 찾을 수 없습니다: "+this.crendentialsPath);let n=i.mkdtempSync(a.join(r.tmpdir(),"google-auth-")),s=a.join(n,"oauth2-keys.json");try{return i.writeFileSync(s,JSON.stringify(o,null,2)),console.log("OAuth2 키 파일을 임시 위치에 저장했습니다:",s),(e=await t({scopes:this.scopes,keyfilePath:s})).credentials&&(console.log("New authentication successful, saving credentials..."),await this.saveCredentials(e)),e}finally{try{i.existsSync(s)&&i.unlinkSync(s),i.rmdirSync(n),console.log("임시 파일 정리 완료")}catch(e){console.warn("임시 파일 정리 중 오류 발생:",e)}}}constructor({user:t="bigwhitekmc",type:o="oauth2",sn:n=0,scopeDir:s="Apis/google/spec",authDir:i="Apis/google"}={}){e(this,"tokenPath",""),e(this,"crendentialsPath",""),e(this,"scopes",void 0),console.log("Initializing GoogleAuth with:",{user:t,type:o,sn:n,scopeDir:s,authDir:i}),this.scopes=[],"oauth2"===o&&(this.tokenPath=`${i}token_${t}_${n}.json`.replace(/^\//,""),this.crendentialsPath=`${i}${o}_${t}_${n}.json`.replace(/^\//,"")),console.log("Paths:",{tokenPath:this.tokenPath,credentialsPath:this.crendentialsPath})}}