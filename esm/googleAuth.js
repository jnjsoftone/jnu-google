function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}import{authenticate as t}from"@google-cloud/local-auth";import{OAuth2Client as s}from"google-auth-library";import{loadJsonFromGithub as i,saveJsonToGithub as o}from"jnu-cloud";import*as n from"fs";import*as r from"os";import*as a from"path";let{ENV_GITHUB_OWNER:l,ENV_GITHUB_REPO:c,ENV_GITHUB_TOKEN:h}=process.env,d={owner:l||"",repo:c||"",token:h||""},p=async e=>i(e,d),u=async(e,t)=>{o(e,t,d)},g=async({user:e="bigwhitekmc",sn:t=0,scopeDir:s=""}={})=>{let i=s?await p(`${s}scopes_${e}_${t}.json`)??await p(`${s}scopes_default.json`):[];return i&&Array.isArray(i)&&0!==i.length||(console.log("Invalid or empty scopes detected, using default scopes"),i=["https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive.file"]),i};export class GoogleAuth{async init({user:e="bigwhitekmc",sn:t=0}={}){return this.scopes=await g({user:e,sn:t,scopeDir:this.scopeDir}),this.scopes&&0!==this.scopes.length||(this.scopes=["https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive.file"]),this}async loadSavedCredentialsIfExist(){try{let e=await p(this.tokenPath);if(!e)return console.log("No credentials found"),null;let t=await p(this.crendentialsPath);if(!t)return null;let i=t.installed||t.web;if(!i||!i.client_id||!i.client_secret)return null;let o=new s({clientId:i.client_id,clientSecret:i.client_secret,redirectUri:i.redirect_uris[0]}),n={access_token:e.access_token,refresh_token:e.refresh_token,scope:this.scopes.join(" "),token_type:e.token_type||"Bearer",expiry_date:e.expiry_date};console.log("Setting credentials with token:",{hasAccessToken:!!n.access_token,hasRefreshToken:!!n.refresh_token,scope:n.scope,tokenType:n.token_type,expiryDate:n.expiry_date?new Date(n.expiry_date).toISOString():"not set"}),o.setCredentials(n);let r=n.expiry_date;if((!r||Date.now()>=r-3e4)&&n.refresh_token){console.log("Token is expired or about to expire, refreshing...");try{let{credentials:e}=await o.refreshAccessToken();o.setCredentials(e),await this.saveCredentials(o)}catch(t){if(t.message&&"string"==typeof t.message&&t.message.includes("invalid_grant")){try{await u(this.tokenPath,{}),console.log(`Token file cleared: ${this.tokenPath}`)}catch(e){console.error("Failed to clear token file:",e)}return null}if(!e.refresh_token)return console.log("No refresh token available, authentication required"),null}}return o}catch(e){return null}}async saveCredentials(e){try{let t=await p(this.crendentialsPath);if(!t)throw Error("OAuth2 keys not found");let s=t.installed||t.web;if(!e.credentials.refresh_token){let t=await p(this.tokenPath);t?.refresh_token&&(e.credentials.refresh_token=t.refresh_token)}let i={type:"authorized_user",client_id:s.client_id,client_secret:s.client_secret,refresh_token:e.credentials.refresh_token,access_token:e.credentials.access_token,scope:this.scopes.join(" "),token_type:e.credentials.token_type||"Bearer",expiry_date:e.credentials.expiry_date};await u(this.tokenPath,i)}catch(e){throw e}}async authorize(){this.scopes&&0!==this.scopes.length||await this.init();let e=await this.loadSavedCredentialsIfExist();if(e)try{return await e.getTokenInfo(e.credentials.access_token||""),e}catch(e){console.error("Token validation failed:",e?.message||"Unknown error")}else console.log("No valid credentials found, starting new authentication...");let s=await p(this.crendentialsPath);if(!s)throw Error("OAuth2 키 파일을 GitHub에서 찾을 수 없습니다: "+this.crendentialsPath);let i=n.mkdtempSync(a.join(r.tmpdir(),"google-auth-")),o=a.join(i,"oauth2-keys.json");try{return n.writeFileSync(o,JSON.stringify(s,null,2)),console.log("OAuth2 키 파일을 임시 위치에 저장했습니다:",o),console.log("Authenticating with scopes:",this.scopes),(e=await t({scopes:this.scopes,keyfilePath:o})).credentials&&(console.log("New authentication successful, saving credentials..."),await this.saveCredentials(e)),e}finally{try{n.existsSync(o)&&n.unlinkSync(o),n.rmdirSync(i),console.log("임시 파일 정리 완료")}catch(e){console.warn("임시 파일 정리 중 오류 발생:",e)}}}constructor({user:t="bigwhitekmc",type:s="oauth2",sn:i=0,scopeDir:o="Apis/google/spec/",authDir:n="Apis/google/"}={}){e(this,"tokenPath",""),e(this,"crendentialsPath",""),e(this,"scopeDir",""),e(this,"scopes",void 0),console.log("Initializing GoogleAuth with:",{user:t,type:s,sn:i,scopeDir:o,authDir:n}),this.scopeDir=o,this.scopes=[],"oauth2"===s&&(this.tokenPath=`${n}token_${t}_${i}.json`.replace(/^\//,""),this.crendentialsPath=`${n}${s}_${t}_${i}.json`.replace(/^\//,""))}}