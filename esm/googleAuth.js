function e(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}import{authenticate as t}from"@google-cloud/local-auth";import{OAuth2Client as o}from"google-auth-library";import{loadJson as s,saveJson as n}from"jnu-abc";let i=({user:e="bigwhitekmc",sn:t=0,scopeDir:o=""}={})=>{let n=o?s(`${o}/scopes_${e}_${t}.json`)??s(`${o}/scopes_default.json`):{};return console.log("Loaded scopes:",n),n};export class GoogleAuth{async loadSavedCredentialsIfExist(){try{console.log("Loading credentials from:",this.tokenPath);let e=s(this.tokenPath);if(console.log("Loaded credentials:",e?"(exists)":"(not found)"),!e||!e.refresh_token)return console.log("No valid credentials found"),null;console.log("Loading OAuth2 keys from:",this.crendentialsPath);let t=s(this.crendentialsPath),n=t.installed||t.web;if(console.log("OAuth2 key loaded:",n?"(exists)":"(not found)"),!n||!n.client_id||!n.client_secret)return console.log("Invalid OAuth2 keys"),null;let i=new o({clientId:n.client_id,clientSecret:n.client_secret,redirectUri:n.redirect_uris[0]}),r={access_token:e.access_token,refresh_token:e.refresh_token,scope:this.scopes.join(" "),token_type:e.token_type||"Bearer",expiry_date:e.expiry_date};return console.log("Setting credentials with token:",{hasAccessToken:!!r.access_token,hasRefreshToken:!!r.refresh_token,scope:r.scope,tokenType:r.token_type,expiryDate:new Date(r.expiry_date).toISOString()}),i.setCredentials(r),i}catch(e){return console.error("Error loading credentials:",e),null}}async saveCredentials(e){try{console.log("Saving credentials...");let t=s(this.crendentialsPath),o=t.installed||t.web;if(!e.credentials.refresh_token){console.log("No refresh token in credentials, keeping existing one");let t=s(this.tokenPath);t?.refresh_token&&(e.credentials.refresh_token=t.refresh_token)}let i={type:"authorized_user",client_id:o.client_id,client_secret:o.client_secret,refresh_token:e.credentials.refresh_token,access_token:e.credentials.access_token,scope:this.scopes.join(" "),token_type:e.credentials.token_type||"Bearer",expiry_date:e.credentials.expiry_date};console.log("Saving credentials to:",this.tokenPath),n(this.tokenPath,i),console.log("Credentials saved successfully")}catch(e){throw console.error("Error saving credentials:",e),e}}async authorize(){console.log("Starting authorization process...");let e=await this.loadSavedCredentialsIfExist();if(e)try{let t=e.credentials.expiry_date;if(t&&Date.now()>=t-3e4){console.log("Token is expired or about to expire, refreshing...");let{credentials:t}=await e.refreshAccessToken();e.setCredentials(t),await this.saveCredentials(e),console.log("Token refreshed successfully")}else console.log("Token is still valid");return e}catch(t){console.error("Error refreshing access token:",t),e=null}return console.log("No valid credentials found, starting new authentication..."),(e=await t({scopes:this.scopes,keyfilePath:this.crendentialsPath})).credentials&&(console.log("New authentication successful, saving credentials..."),await this.saveCredentials(e)),e}constructor({user:t="bigwhitekmc",type:o="oauth2",sn:s=0,scopeDir:n="",authDir:r=""}={}){e(this,"tokenPath",""),e(this,"crendentialsPath",""),e(this,"scopes",void 0),console.log("Initializing GoogleAuth with:",{user:t,type:o,sn:s,scopeDir:n,authDir:r}),this.scopes=i({user:t,sn:s,scopeDir:n}),"oauth2"===o&&(this.tokenPath=`${r}/token_${t}_${s}.json`,this.crendentialsPath=`${r}/${o}_${t}_${s}.json`),console.log("Paths:",{tokenPath:this.tokenPath,credentialsPath:this.crendentialsPath})}}