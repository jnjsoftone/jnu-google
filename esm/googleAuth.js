function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}import{authenticate as t}from"@google-cloud/local-auth";import{google as s}from"googleapis";import{loadJson as i,saveJson as r}from"jnu-abc";let a=({user:e="bigwhitekmc",sn:t=0,scopeDir:s=""}={})=>s?i(`${s}/scopes_${e}_${t}.json`)??i(`${s}/scopes_default.json`):{};export class GoogleAuth{async loadSavedCredentialsIfExist(){try{let e=i(this.tokenPath),t=JSON.parse(e);return s.auth.fromJSON(t)}catch(e){return null}}async saveCredentials(e){let t=JSON.parse(i(this.crendentialsPath)),s=t.installed||t.web,a=JSON.stringify({type:"authorized_user",client_id:s.client_id,client_secret:s.client_secret,refresh_token:e.credentials.refresh_token,expiry_date:e.credentials.expiry_date});r(this.tokenPath,a)}async authorize(){let e=await this.loadSavedCredentialsIfExist();if(e)try{let t=e.credentials.expiry_date;if(t&&Date.now()>=t-3e4){console.log("Token is expired or about to expire, refreshing...");let{credentials:t}=await e.refreshAccessToken();e.setCredentials(t),await this.saveCredentials(e)}return e}catch(t){console.error("Error refreshing access token:",t),e=null}return(e=await t({scopes:this.scopes,keyfilePath:this.crendentialsPath})).credentials&&await this.saveCredentials(e),e}constructor({user:t="bigwhitekmc",type:s="oauth2",sn:i=0,scopeDir:r="",authDir:n=""}={}){e(this,"tokenPath",""),e(this,"crendentialsPath",""),e(this,"scopes",void 0),this.scopes=a({user:t,sn:i,scopeDir:r}),"oauth2"===s&&(this.tokenPath=`${n}/token_${t}_${i}.json`,this.crendentialsPath=`${n}/${s}_${t}_${i}.json`)}}