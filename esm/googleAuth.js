function e(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}import{authenticate as t}from"@google-cloud/local-auth";import{OAuth2Client as o}from"google-auth-library";import{loadJsonFromGithub as s,saveJsonToGithub as n}from"jnu-cloud";let{ENV_GITHUB_OWNER:i,ENV_GITHUB_REPO:r,ENV_GITHUB_TOKEN:a}=process.env,l={owner:i||"",repo:r||"",token:a||""},c=async e=>s(e,l),h=async(e,t)=>{n(e,t,l)},d=async({user:e="bigwhitekmc",sn:t=0,scopeDir:o=""}={})=>{let s=o?await c(`${o}scopes_${e}_${t}.json`)??await c(`${o}scopes_default.json`):[];return console.log("Loaded scopes:",s),s};export class GoogleAuth{async init({user:e="bigwhitekmc",sn:t=0,scopeDir:o=""}={}){return this.scopes=await d({user:e,sn:t,scopeDir:o}),this}async loadSavedCredentialsIfExist(){try{console.log("Loading credentials from:",this.tokenPath);let e=await c(this.tokenPath);if(console.log("Loaded credentials:",e?"(exists)":"(not found)"),!e)return console.log("No credentials found"),null;console.log("Loading OAuth2 keys from:",this.crendentialsPath);let t=await c(this.crendentialsPath),s=t.installed||t.web;if(console.log("OAuth2 key loaded:",s?"(exists)":"(not found)"),!s||!s.client_id||!s.client_secret)return console.log("Invalid OAuth2 keys"),null;let n=new o({clientId:s.client_id,clientSecret:s.client_secret,redirectUri:s.redirect_uris[0]}),i={access_token:e.access_token,refresh_token:e.refresh_token,scope:this.scopes.join(" "),token_type:e.token_type||"Bearer",expiry_date:e.expiry_date};console.log("Setting credentials with token:",{hasAccessToken:!!i.access_token,hasRefreshToken:!!i.refresh_token,scope:i.scope,tokenType:i.token_type,expiryDate:i.expiry_date?new Date(i.expiry_date).toISOString():"not set"}),n.setCredentials(i);let r=i.expiry_date;if((!r||Date.now()>=r-3e4)&&i.refresh_token){console.log("Token is expired or about to expire, refreshing...");try{let{credentials:e}=await n.refreshAccessToken();n.setCredentials(e),await this.saveCredentials(n),console.log("Token refreshed successfully")}catch(t){if(console.error("Error refreshing token:",t),!e.refresh_token)return console.log("No refresh token available, authentication required"),null}}return n}catch(e){return console.error("Error loading credentials:",e),null}}async saveCredentials(e){try{console.log("Saving credentials...");let t=await c(this.crendentialsPath),o=t.installed||t.web;if(!e.credentials.refresh_token){console.log("No refresh token in credentials, keeping existing one");let t=await c(this.tokenPath);t?.refresh_token&&(e.credentials.refresh_token=t.refresh_token)}let s={type:"authorized_user",client_id:o.client_id,client_secret:o.client_secret,refresh_token:e.credentials.refresh_token,access_token:e.credentials.access_token,scope:this.scopes.join(" "),token_type:e.credentials.token_type||"Bearer",expiry_date:e.credentials.expiry_date};console.log("Saving credentials to:",this.tokenPath),await h(this.tokenPath,s),console.log("Credentials saved successfully")}catch(e){throw console.error("Error saving credentials:",e),e}}async authorize(){console.log("Starting authorization process...");let e=await this.loadSavedCredentialsIfExist();return e||(console.log("No valid credentials found, starting new authentication..."),(e=await t({scopes:this.scopes,keyfilePath:this.crendentialsPath})).credentials&&(console.log("New authentication successful, saving credentials..."),await this.saveCredentials(e))),e}constructor({user:t="bigwhitekmc",type:o="oauth2",sn:s=0,scopeDir:n="Apis/google/spec",authDir:i="Apis/google"}={}){e(this,"tokenPath",""),e(this,"crendentialsPath",""),e(this,"scopes",void 0),console.log("Initializing GoogleAuth with:",{user:t,type:o,sn:s,scopeDir:n,authDir:i}),this.scopes=[],"oauth2"===o&&(this.tokenPath=`${i}token_${t}_${s}.json`.replace(/^\//,""),this.crendentialsPath=`${i}${o}_${t}_${s}.json`.replace(/^\//,"")),console.log("Paths:",{tokenPath:this.tokenPath,credentialsPath:this.crendentialsPath})}}