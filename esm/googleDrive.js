function e(e,i,t){return i in e?Object.defineProperty(e,i,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[i]=t,e}import*as i from"fs";import*as t from"path";import{google as a}from"googleapis";import{GoogleAuth as s}from"./googleAuth.js";export class GoogleDrive{async init(){let e=await this.googleAuth.authorize();return this.service=a.drive({version:"v3",auth:e}),this}constructor({user:a="bigwhitekmc",type:r="oauth2",sn:n=0,scopeDir:o="Apis/google/spec/",authDir:l="Apis/google/"}={}){e(this,"service",void 0),e(this,"googleAuth",void 0),e(this,"listFiles",async(e={})=>{let i=await this.service,t={pageSize:30,fields:"nextPageToken, files(id, name, mimeType, description, createdTime, modifiedTime, size, parents, webViewLink)",...e},a=await i.files.list(t),s=a.data.files;return s?.length===0?(console.log("No files found."),[]):{files:s,nextPageToken:a.data.nextPageToken}}),e(this,"searchFiles",async(e,i={})=>this.listFiles({q:e,...i})),e(this,"getFile",async(e,i="id, name, mimeType, description, createdTime, modifiedTime, size, parents, webViewLink")=>{let t=await this.service;return(await t.files.get({fileId:e,fields:i})).data}),e(this,"createFile",async e=>{let i=await this.service;return(await i.files.create({resource:e,fields:"id, name, mimeType, parents"})).data}),e(this,"createFolder",async(e,i)=>{let t={name:e,mimeType:"application/vnd.google-apps.folder"};return i&&(t.parents=[i]),this.createFile(t)}),e(this,"uploadFile",async(e,a={})=>{let s=await this.service;if(!i.existsSync(e))throw Error(`File not found: ${e}`);let r={name:a.name||t.basename(e)};a.description&&(r.description=a.description),a.parentId&&(r.parents=[a.parentId]);let n={body:i.createReadStream(e),mimeType:a.mimeType};return(await s.files.create({resource:r,media:n,fields:"id, name, mimeType, webViewLink, size, createdTime"})).data}),e(this,"updateFile",async(e,i)=>{let t=await this.service;return(await t.files.update({fileId:e,resource:i,fields:"id, name, mimeType, description, modifiedTime"})).data}),e(this,"updateFileContent",async(e,t,a)=>{let s=await this.service;if(!i.existsSync(t))throw Error(`File not found: ${t}`);let r={body:i.createReadStream(t),mimeType:a};return(await s.files.update({fileId:e,media:r,fields:"id, name, mimeType, modifiedTime, size"})).data}),e(this,"deleteFile",async e=>{let i=await this.service;return await i.files.delete({fileId:e}),!0}),e(this,"downloadFile",async(e,a)=>{let s=await this.service,r=await this.getFile(e),n=t.dirname(a);i.existsSync(n)||i.mkdirSync(n,{recursive:!0});let o=await s.files.get({fileId:e,alt:"media"},{responseType:"stream"});return new Promise((e,t)=>{let s=i.createWriteStream(a);o.data.on("end",()=>{e({success:!0,path:a,fileInfo:r})}).on("error",e=>{t(e)}).pipe(s)})}),e(this,"copyFile",async(e,i={})=>{let t=await this.service,a={};return i.name&&(a.name=i.name),i.description&&(a.description=i.description),i.parentId&&(a.parents=[i.parentId]),(await t.files.copy({fileId:e,resource:a,fields:"id, name, mimeType, parents, webViewLink"})).data}),e(this,"moveFile",async(e,i,t)=>{let a=await this.service,s=t;if(!s){let i=await this.getFile(e,"parents");s=i.parents?.join(",")}return(await a.files.update({fileId:e,addParents:i,removeParents:s,fields:"id, name, parents"})).data}),e(this,"getFilePermissions",async e=>{let i=await this.service;return(await i.permissions.list({fileId:e,fields:"permissions(id, type, role, emailAddress, domain)"})).data.permissions||[]}),e(this,"shareFile",async(e,i,t=!1)=>{let a=await this.service;return(await a.permissions.create({fileId:e,resource:i,sendNotificationEmail:t,fields:"id, type, role, emailAddress, domain"})).data}),e(this,"revokePermission",async(e,i)=>{let t=await this.service;return await t.permissions.delete({fileId:e,permissionId:i}),!0}),e(this,"generatePublicUrl",async(e,i=!0)=>{if(await this.service,i)await this.shareFile(e,{type:"anyone",role:"reader"});else{let i=(await this.getFilePermissions(e)).find(e=>"anyone"===e.type);i&&await this.revokePermission(e,i.id)}let t=await this.getFile(e,"webViewLink, webContentLink");return{webViewLink:t.webViewLink,webContentLink:t.webContentLink,isPublic:i}}),e(this,"exportFile",async(e,a,s)=>{let r=await this.service,n=await this.getFile(e),o=await r.files.export({fileId:e,mimeType:a},{responseType:"stream"});if(s){let e=t.dirname(s);return i.existsSync(e)||i.mkdirSync(e,{recursive:!0}),new Promise((e,t)=>{let a=i.createWriteStream(s);o.data.on("end",()=>{e({success:!0,path:s,fileInfo:n})}).on("error",e=>{t(e)}).pipe(a)})}return o.data}),this.googleAuth=new s({user:a,type:r,sn:n,scopeDir:o,authDir:l})}}