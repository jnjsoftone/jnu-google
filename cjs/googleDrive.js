"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"GoogleDrive",{enumerable:!0,get:function(){return o}});const e=/*#__PURE__*/n(require("fs")),i=/*#__PURE__*/n(require("path")),t=require("googleapis"),a=require("./googleAuth.js");function r(e,i,t){return i in e?Object.defineProperty(e,i,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[i]=t,e}function s(e){if("function"!=typeof WeakMap)return null;var i=new WeakMap,t=new WeakMap;return(s=function(e){return e?t:i})(e)}function n(e,i){if(!i&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=s(i);if(t&&t.has(e))return t.get(e);var a={__proto__:null},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var n in e)if("default"!==n&&Object.prototype.hasOwnProperty.call(e,n)){var o=r?Object.getOwnPropertyDescriptor(e,n):null;o&&(o.get||o.set)?Object.defineProperty(a,n,o):a[n]=e[n]}return a.default=e,t&&t.set(e,a),a}class o{async init(){let e=await this.googleAuth.authorize();return this.service=t.google.drive({version:"v3",auth:e}),this}constructor({user:t="bigwhitekmc",type:s="oauth2",sn:n=0,scopeDir:o="Apis/google/spec/",authDir:l="Apis/google/"}={}){r(this,"service",void 0),r(this,"googleAuth",void 0),r(this,"listFiles",async(e={})=>{let i=await this.service,t={pageSize:30,fields:"nextPageToken, files(id, name, mimeType, description, createdTime, modifiedTime, size, parents, webViewLink)",...e},a=await i.files.list(t),r=a.data.files;return r?.length===0?(console.log("No files found."),[]):{files:r,nextPageToken:a.data.nextPageToken}}),r(this,"searchFiles",async(e,i={})=>this.listFiles({q:e,...i})),r(this,"getFile",async(e,i="id, name, mimeType, description, createdTime, modifiedTime, size, parents, webViewLink")=>{let t=await this.service;return(await t.files.get({fileId:e,fields:i})).data}),r(this,"createFile",async e=>{let i=await this.service;return(await i.files.create({resource:e,fields:"id, name, mimeType, parents"})).data}),r(this,"createFolder",async(e,i)=>{let t={name:e,mimeType:"application/vnd.google-apps.folder"};return i&&(t.parents=[i]),this.createFile(t)}),r(this,"uploadFile",async(t,a={})=>{let r=await this.service;if(!e.existsSync(t))throw Error(`File not found: ${t}`);let s={name:a.name||i.basename(t)};a.description&&(s.description=a.description),a.parentId&&(s.parents=[a.parentId]);let n={body:e.createReadStream(t),mimeType:a.mimeType};return(await r.files.create({resource:s,media:n,fields:"id, name, mimeType, webViewLink, size, createdTime"})).data}),r(this,"updateFile",async(e,i)=>{let t=await this.service;return(await t.files.update({fileId:e,resource:i,fields:"id, name, mimeType, description, modifiedTime"})).data}),r(this,"updateFileContent",async(i,t,a)=>{let r=await this.service;if(!e.existsSync(t))throw Error(`File not found: ${t}`);let s={body:e.createReadStream(t),mimeType:a};return(await r.files.update({fileId:i,media:s,fields:"id, name, mimeType, modifiedTime, size"})).data}),r(this,"deleteFile",async e=>{let i=await this.service;return await i.files.delete({fileId:e}),!0}),r(this,"downloadFile",async(t,a)=>{let r=await this.service,s=await this.getFile(t),n=i.dirname(a);e.existsSync(n)||e.mkdirSync(n,{recursive:!0});let o=await r.files.get({fileId:t,alt:"media"},{responseType:"stream"});return new Promise((i,t)=>{let r=e.createWriteStream(a);o.data.on("end",()=>{i({success:!0,path:a,fileInfo:s})}).on("error",e=>{t(e)}).pipe(r)})}),r(this,"copyFile",async(e,i={})=>{let t=await this.service,a={};return i.name&&(a.name=i.name),i.description&&(a.description=i.description),i.parentId&&(a.parents=[i.parentId]),(await t.files.copy({fileId:e,resource:a,fields:"id, name, mimeType, parents, webViewLink"})).data}),r(this,"moveFile",async(e,i,t)=>{let a=await this.service,r=t;if(!r){let i=await this.getFile(e,"parents");r=i.parents?.join(",")}return(await a.files.update({fileId:e,addParents:i,removeParents:r,fields:"id, name, parents"})).data}),r(this,"getFilePermissions",async e=>{let i=await this.service;return(await i.permissions.list({fileId:e,fields:"permissions(id, type, role, emailAddress, domain)"})).data.permissions||[]}),r(this,"shareFile",async(e,i,t=!1)=>{let a=await this.service;return(await a.permissions.create({fileId:e,resource:i,sendNotificationEmail:t,fields:"id, type, role, emailAddress, domain"})).data}),r(this,"revokePermission",async(e,i)=>{let t=await this.service;return await t.permissions.delete({fileId:e,permissionId:i}),!0}),r(this,"generatePublicUrl",async(e,i=!0)=>{if(await this.service,i)await this.shareFile(e,{type:"anyone",role:"reader"});else{let i=(await this.getFilePermissions(e)).find(e=>"anyone"===e.type);i&&await this.revokePermission(e,i.id)}let t=await this.getFile(e,"webViewLink, webContentLink");return{webViewLink:t.webViewLink,webContentLink:t.webContentLink,isPublic:i}}),r(this,"exportFile",async(t,a,r)=>{let s=await this.service,n=await this.getFile(t),o=await s.files.export({fileId:t,mimeType:a},{responseType:"stream"});if(r){let t=i.dirname(r);return e.existsSync(t)||e.mkdirSync(t,{recursive:!0}),new Promise((i,t)=>{let a=e.createWriteStream(r);o.data.on("end",()=>{i({success:!0,path:r,fileInfo:n})}).on("error",e=>{t(e)}).pipe(a)})}return o.data}),this.googleAuth=new a.GoogleAuth({user:t,type:s,sn:n,scopeDir:o,authDir:l})}}