"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"GoogleAuth",{enumerable:!0,get:function(){return g}});const e=require("@google-cloud/local-auth"),t=require("google-auth-library"),s=require("jnu-cloud"),n=/*#__PURE__*/c(require("fs")),r=/*#__PURE__*/c(require("os")),i=/*#__PURE__*/c(require("path"));function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,s=new WeakMap;return(a=function(e){return e?s:t})(e)}function c(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var s=a(t);if(s&&s.has(e))return s.get(e);var n={__proto__:null},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if("default"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var o=r?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=e[i]}return n.default=e,s&&s.set(e,n),n}const{ENV_GITHUB_OWNER:l,ENV_GITHUB_REPO:h,ENV_GITHUB_TOKEN:u}=process.env,p={owner:l||"",repo:h||"",token:u||""},d=async e=>(0,s.loadJsonFromGithub)(e,p),f=async(e,t)=>{(0,s.saveJsonToGithub)(e,t,p)},_=async({user:e="bigwhitekmc",sn:t=0,scopeDir:s=""}={})=>{let n=s?await d(`${s}scopes_${e}_${t}.json`)??await d(`${s}scopes_default.json`):[];return n&&Array.isArray(n)&&0!==n.length||(console.log("Invalid or empty scopes detected, using default scopes"),n=["https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive.file"]),n};class g{async init({user:e="bigwhitekmc",sn:t=0}={}){return this.scopes=await _({user:e,sn:t,scopeDir:this.scopeDir}),this.scopes&&0!==this.scopes.length||(this.scopes=["https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive.file"]),this}async loadSavedCredentialsIfExist(){try{let e=await d(this.tokenPath);if(!e)return console.log("No credentials found"),null;let s=await d(this.crendentialsPath);if(!s)return null;let n=s.installed||s.web;if(!n||!n.client_id||!n.client_secret)return null;let r=new t.OAuth2Client({clientId:n.client_id,clientSecret:n.client_secret,redirectUri:n.redirect_uris[0]}),i={access_token:e.access_token,refresh_token:e.refresh_token,scope:this.scopes.join(" "),token_type:e.token_type||"Bearer",expiry_date:e.expiry_date};console.log("Setting credentials with token:",{hasAccessToken:!!i.access_token,hasRefreshToken:!!i.refresh_token,scope:i.scope,tokenType:i.token_type,expiryDate:i.expiry_date?new Date(i.expiry_date).toISOString():"not set"}),r.setCredentials(i);let o=i.expiry_date;if((!o||Date.now()>=o-3e4)&&i.refresh_token){console.log("Token is expired or about to expire, refreshing...");try{let{credentials:e}=await r.refreshAccessToken();r.setCredentials(e),await this.saveCredentials(r)}catch(t){if(t.message&&"string"==typeof t.message&&t.message.includes("invalid_grant")){try{await f(this.tokenPath,{}),console.log(`Token file cleared: ${this.tokenPath}`)}catch(e){console.error("Failed to clear token file:",e)}return null}if(!e.refresh_token)return console.log("No refresh token available, authentication required"),null}}return r}catch(e){return null}}async saveCredentials(e){try{let t=await d(this.crendentialsPath);if(!t)throw Error("OAuth2 keys not found");let s=t.installed||t.web;if(!e.credentials.refresh_token){let t=await d(this.tokenPath);t?.refresh_token&&(e.credentials.refresh_token=t.refresh_token)}let n={type:"authorized_user",client_id:s.client_id,client_secret:s.client_secret,refresh_token:e.credentials.refresh_token,access_token:e.credentials.access_token,scope:this.scopes.join(" "),token_type:e.credentials.token_type||"Bearer",expiry_date:e.credentials.expiry_date};await f(this.tokenPath,n)}catch(e){throw e}}async authorize(){this.scopes&&0!==this.scopes.length||await this.init();let t=await this.loadSavedCredentialsIfExist();if(t)try{return await t.getTokenInfo(t.credentials.access_token||""),t}catch(e){console.error("Token validation failed:",e?.message||"Unknown error")}else console.log("No valid credentials found, starting new authentication...");let s=await d(this.crendentialsPath);if(!s)throw Error("OAuth2 키 파일을 GitHub에서 찾을 수 없습니다: "+this.crendentialsPath);let o=n.mkdtempSync(i.join(r.tmpdir(),"google-auth-")),a=i.join(o,"oauth2-keys.json");try{return n.writeFileSync(a,JSON.stringify(s,null,2)),console.log("OAuth2 키 파일을 임시 위치에 저장했습니다:",a),console.log("Authenticating with scopes:",this.scopes),(t=await (0,e.authenticate)({scopes:this.scopes,keyfilePath:a})).credentials&&(console.log("New authentication successful, saving credentials..."),await this.saveCredentials(t)),t}finally{try{n.existsSync(a)&&n.unlinkSync(a),n.rmdirSync(o),console.log("임시 파일 정리 완료")}catch(e){console.warn("임시 파일 정리 중 오류 발생:",e)}}}constructor({user:e="bigwhitekmc",type:t="oauth2",sn:s=0,scopeDir:n="Apis/google/spec/",authDir:r="Apis/google/"}={}){o(this,"tokenPath",""),o(this,"crendentialsPath",""),o(this,"scopeDir",""),o(this,"scopes",void 0),console.log("Initializing GoogleAuth with:",{user:e,type:t,sn:s,scopeDir:n,authDir:r}),this.scopeDir=n,this.scopes=[],"oauth2"===t&&(this.tokenPath=`${r}token_${e}_${s}.json`.replace(/^\//,""),this.crendentialsPath=`${r}${t}_${e}_${s}.json`.replace(/^\//,""))}}