"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"GoogleAuth",{enumerable:!0,get:function(){return g}});const e=require("@google-cloud/local-auth"),t=require("google-auth-library"),n=require("jnu-cloud"),o=/*#__PURE__*/l(require("fs")),r=/*#__PURE__*/l(require("os")),s=/*#__PURE__*/l(require("path"));function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(a=function(e){return e?n:t})(e)}function l(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=a(t);if(n&&n.has(e))return n.get(e);var o={__proto__:null},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&Object.prototype.hasOwnProperty.call(e,s)){var i=r?Object.getOwnPropertyDescriptor(e,s):null;i&&(i.get||i.set)?Object.defineProperty(o,s,i):o[s]=e[s]}return o.default=e,n&&n.set(e,o),o}const{ENV_GITHUB_OWNER:c,ENV_GITHUB_REPO:h,ENV_GITHUB_TOKEN:u}=process.env,d={owner:c||"",repo:h||"",token:u||""},f=async e=>(0,n.loadJsonFromGithub)(e,d),_=async(e,t)=>{(0,n.saveJsonToGithub)(e,t,d)},p=async({user:e="bigwhitekmc",sn:t=0,scopeDir:n=""}={})=>{let o=n?await f(`${n}scopes_${e}_${t}.json`)??await f(`${n}scopes_default.json`):[];return console.log("Loaded scopes:",o),o};class g{async init({user:e="bigwhitekmc",sn:t=0,scopeDir:n=""}={}){return this.scopes=await p({user:e,sn:t,scopeDir:n}),this}async loadSavedCredentialsIfExist(){try{console.log("Loading credentials from:",this.tokenPath);let e=await f(this.tokenPath);if(console.log("Loaded credentials:",e?"(exists)":"(not found)"),!e)return console.log("No credentials found"),null;console.log("Loading OAuth2 keys from:",this.crendentialsPath);let n=await f(this.crendentialsPath);if(!n)return console.log("No OAuth2 keys found"),null;let o=n.installed||n.web;if(console.log("OAuth2 key loaded:",o?"(exists)":"(not found)"),!o||!o.client_id||!o.client_secret)return console.log("Invalid OAuth2 keys"),null;let r=new t.OAuth2Client({clientId:o.client_id,clientSecret:o.client_secret,redirectUri:o.redirect_uris[0]}),s={access_token:e.access_token,refresh_token:e.refresh_token,scope:this.scopes.join(" "),token_type:e.token_type||"Bearer",expiry_date:e.expiry_date};console.log("Setting credentials with token:",{hasAccessToken:!!s.access_token,hasRefreshToken:!!s.refresh_token,scope:s.scope,tokenType:s.token_type,expiryDate:s.expiry_date?new Date(s.expiry_date).toISOString():"not set"}),r.setCredentials(s);let i=s.expiry_date;if((!i||Date.now()>=i-3e4)&&s.refresh_token){console.log("Token is expired or about to expire, refreshing...");try{let{credentials:e}=await r.refreshAccessToken();r.setCredentials(e),await this.saveCredentials(r),console.log("Token refreshed successfully")}catch(t){if(console.error("Error refreshing token:",t),!e.refresh_token)return console.log("No refresh token available, authentication required"),null}}return r}catch(e){return console.error("Error loading credentials:",e),null}}async saveCredentials(e){try{console.log("Saving credentials...");let t=await f(this.crendentialsPath);if(!t)throw console.error("OAuth2 keys not found"),Error("OAuth2 keys not found");let n=t.installed||t.web;if(!e.credentials.refresh_token){console.log("No refresh token in credentials, keeping existing one");let t=await f(this.tokenPath);t?.refresh_token&&(e.credentials.refresh_token=t.refresh_token)}let o={type:"authorized_user",client_id:n.client_id,client_secret:n.client_secret,refresh_token:e.credentials.refresh_token,access_token:e.credentials.access_token,scope:this.scopes.join(" "),token_type:e.credentials.token_type||"Bearer",expiry_date:e.credentials.expiry_date};console.log("Saving credentials to:",this.tokenPath),await _(this.tokenPath,o),console.log("Credentials saved successfully")}catch(e){throw console.error("Error saving credentials:",e),e}}async authorize(){console.log("Starting authorization process...");let t=await this.loadSavedCredentialsIfExist();if(t)return t;console.log("No valid credentials found, starting new authentication...");let n=await f(this.crendentialsPath);if(!n)throw Error("OAuth2 키 파일을 GitHub에서 찾을 수 없습니다: "+this.crendentialsPath);let i=o.mkdtempSync(s.join(r.tmpdir(),"google-auth-")),a=s.join(i,"oauth2-keys.json");try{return o.writeFileSync(a,JSON.stringify(n,null,2)),console.log("OAuth2 키 파일을 임시 위치에 저장했습니다:",a),(t=await (0,e.authenticate)({scopes:this.scopes,keyfilePath:a})).credentials&&(console.log("New authentication successful, saving credentials..."),await this.saveCredentials(t)),t}finally{try{o.existsSync(a)&&o.unlinkSync(a),o.rmdirSync(i),console.log("임시 파일 정리 완료")}catch(e){console.warn("임시 파일 정리 중 오류 발생:",e)}}}constructor({user:e="bigwhitekmc",type:t="oauth2",sn:n=0,scopeDir:o="Apis/google/spec",authDir:r="Apis/google"}={}){i(this,"tokenPath",""),i(this,"crendentialsPath",""),i(this,"scopes",void 0),console.log("Initializing GoogleAuth with:",{user:e,type:t,sn:n,scopeDir:o,authDir:r}),this.scopes=[],"oauth2"===t&&(this.tokenPath=`${r}token_${e}_${n}.json`.replace(/^\//,""),this.crendentialsPath=`${r}${t}_${e}_${n}.json`.replace(/^\//,"")),console.log("Paths:",{tokenPath:this.tokenPath,credentialsPath:this.crendentialsPath})}}