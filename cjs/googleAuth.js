"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"GoogleAuth",{enumerable:!0,get:function(){return r}});const e=require("@google-cloud/local-auth"),t=require("google-auth-library"),o=require("jnu-abc");function s(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}const n=({user:e="bigwhitekmc",sn:t=0,scopeDir:s=""}={})=>{let n=s?(0,o.loadJson)(`${s}/scopes_${e}_${t}.json`)??(0,o.loadJson)(`${s}/scopes_default.json`):{};return console.log("Loaded scopes:",n),n};class r{async loadSavedCredentialsIfExist(){try{console.log("Loading credentials from:",this.tokenPath);let e=(0,o.loadJson)(this.tokenPath);if(console.log("Loaded credentials:",e?"(exists)":"(not found)"),!e||!e.refresh_token)return console.log("No valid credentials found"),null;console.log("Loading OAuth2 keys from:",this.crendentialsPath);let s=(0,o.loadJson)(this.crendentialsPath),n=s.installed||s.web;if(console.log("OAuth2 key loaded:",n?"(exists)":"(not found)"),!n||!n.client_id||!n.client_secret)return console.log("Invalid OAuth2 keys"),null;let r=new t.OAuth2Client({clientId:n.client_id,clientSecret:n.client_secret,redirectUri:n.redirect_uris[0]}),i={access_token:e.access_token,refresh_token:e.refresh_token,scope:this.scopes.join(" "),token_type:e.token_type||"Bearer",expiry_date:e.expiry_date};return console.log("Setting credentials with token:",{hasAccessToken:!!i.access_token,hasRefreshToken:!!i.refresh_token,scope:i.scope,tokenType:i.token_type,expiryDate:new Date(i.expiry_date).toISOString()}),r.setCredentials(i),r}catch(e){return console.error("Error loading credentials:",e),null}}async saveCredentials(e){try{console.log("Saving credentials...");let t=(0,o.loadJson)(this.crendentialsPath),s=t.installed||t.web;if(!e.credentials.refresh_token){console.log("No refresh token in credentials, keeping existing one");let t=(0,o.loadJson)(this.tokenPath);t?.refresh_token&&(e.credentials.refresh_token=t.refresh_token)}let n={type:"authorized_user",client_id:s.client_id,client_secret:s.client_secret,refresh_token:e.credentials.refresh_token,access_token:e.credentials.access_token,scope:this.scopes.join(" "),token_type:e.credentials.token_type||"Bearer",expiry_date:e.credentials.expiry_date};console.log("Saving credentials to:",this.tokenPath),(0,o.saveJson)(this.tokenPath,n),console.log("Credentials saved successfully")}catch(e){throw console.error("Error saving credentials:",e),e}}async authorize(){console.log("Starting authorization process...");let t=await this.loadSavedCredentialsIfExist();if(t)try{let e=t.credentials.expiry_date;if(e&&Date.now()>=e-3e4){console.log("Token is expired or about to expire, refreshing...");let{credentials:e}=await t.refreshAccessToken();t.setCredentials(e),await this.saveCredentials(t),console.log("Token refreshed successfully")}else console.log("Token is still valid");return t}catch(e){console.error("Error refreshing access token:",e),t=null}return console.log("No valid credentials found, starting new authentication..."),(t=await (0,e.authenticate)({scopes:this.scopes,keyfilePath:this.crendentialsPath})).credentials&&(console.log("New authentication successful, saving credentials..."),await this.saveCredentials(t)),t}constructor({user:e="bigwhitekmc",type:t="oauth2",sn:o=0,scopeDir:r="",authDir:i=""}={}){s(this,"tokenPath",""),s(this,"crendentialsPath",""),s(this,"scopes",void 0),console.log("Initializing GoogleAuth with:",{user:e,type:t,sn:o,scopeDir:r,authDir:i}),this.scopes=n({user:e,sn:o,scopeDir:r}),"oauth2"===t&&(this.tokenPath=`${i}/token_${e}_${o}.json`,this.crendentialsPath=`${i}/${t}_${e}_${o}.json`),console.log("Paths:",{tokenPath:this.tokenPath,credentialsPath:this.crendentialsPath})}}